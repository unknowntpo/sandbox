// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthcheckerClient is the client API for Healthchecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthcheckerClient interface {
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckReply, error)
}

type healthcheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthcheckerClient(cc grpc.ClientConnInterface) HealthcheckerClient {
	return &healthcheckerClient{cc}
}

func (c *healthcheckerClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckReply, error) {
	out := new(HealthcheckReply)
	err := c.cc.Invoke(ctx, "/healthcheck.Healthchecker/Healthcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthcheckerServer is the server API for Healthchecker service.
// All implementations must embed UnimplementedHealthcheckerServer
// for forward compatibility
type HealthcheckerServer interface {
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckReply, error)
	mustEmbedUnimplementedHealthcheckerServer()
}

// UnimplementedHealthcheckerServer must be embedded to have forward compatible implementations.
type UnimplementedHealthcheckerServer struct {
}

func (UnimplementedHealthcheckerServer) Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedHealthcheckerServer) mustEmbedUnimplementedHealthcheckerServer() {}

// UnsafeHealthcheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthcheckerServer will
// result in compilation errors.
type UnsafeHealthcheckerServer interface {
	mustEmbedUnimplementedHealthcheckerServer()
}

func RegisterHealthcheckerServer(s grpc.ServiceRegistrar, srv HealthcheckerServer) {
	s.RegisterService(&Healthchecker_ServiceDesc, srv)
}

func _Healthchecker_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcheckerServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcheck.Healthchecker/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcheckerServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Healthchecker_ServiceDesc is the grpc.ServiceDesc for Healthchecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Healthchecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "healthcheck.Healthchecker",
	HandlerType: (*HealthcheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthcheck",
			Handler:    _Healthchecker_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcheck/healthcheck.proto",
}
