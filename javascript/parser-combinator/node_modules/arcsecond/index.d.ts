// Type definitions for construct-js
// Project: https://github.com/francisrstokes/construct-js
// Definitions by:
//  - Francis Stokes <https://github.com/francisrstokes/

declare type ParserState<ErrorType, DataType, ResultType> = {
  dataView: DataView;
  inputType: 'string' | 'arrayBuffer' | 'typedArray' | 'dataView';
  isError: boolean;
  error: ErrorType;
  result: ResultType;
  data: DataType;
  index: number;
};

declare type StateTransformFunction<
  CurrentError,
  CurrentData,
  CurrentResult,
  NextError,
  NextData,
  NextResult,
> = (state: ParserState<CurrentError, CurrentData, CurrentResult>) => ParserState<NextError, NextData, NextResult>;

declare class Parser<
  NextError,
  NextData,
  NextResult,
> {
  private p: StateTransformFunction<NextError, NextData, NextResult>;
  constructor(p: StateTransformFunction<NextError, NextData, NextResult>);
}

declare type AnyParser = Parser<any, any, any>;
declare type AnyState = ParserState<any, any, any>;

declare const getData: AnyParser;
declare function setData<DataType>(data: DataType): Parser<any, DataType, any>;
declare function mapData<FromDataType, ToDataType>(fn:(data: FromDataType) => ToDataType): Parser<any, ToDataType, any>;
declare function withData<ErrorType, DataType, ResultType>(parser: Parser<ErrorType, any, ResultType>):(data: DataType) => Parser<ErrorType, DataType, ResultType>;

declare function pipeParsers(parsers: AnyParser[]): AnyParser;
declare function composeParsers(parsers: AnyParser[]): AnyParser;

declare function tapParser(fn: (state:AnyState) => void): AnyParser;
declare function decide(fn: (state:AnyState) => void): AnyParser;
